#group,false,false,false,false,true,true,true
#datatype,string,long,dateTime:RFC3339,double,string,string,string
#default,_result,,,,,,
,result,table,_time,_value,_field,_measurement,sensor_id
,,0,2024-01-01T10:00:00Z,21.5,Temperature,Fan,1
,,0,2024-01-01T10:00:00Z,23.2,Temperature,Fan,2
,,0,2024-01-01T10:00:00Z,19.8,Temperature,Fan,3
,,0,2024-01-01T10:00:00Z,25.7,Temperature,Fan,4
,,0,2024-01-01T10:00:00Z,20.3,Temperature,Fan,5
,,0,2024-02-01T10:00:00Z,22.1,Temperature,Fan,1
,,0,2024-02-01T10:00:00Z,26.4,Temperature,Fan,2
,,0,2024-02-01T10:00:00Z,23.5,Temperature,Fan,3
,,0,2024-02-01T10:00:00Z,18.7,Temperature,Fan,4
,,0,2024-02-01T10:00:00Z,24.3,Temperature,Fan,5
,,0,2024-03-01T10:00:00Z,24.0,Temperature,Fan,1
,,0,2024-03-01T10:00:00Z,19.9,Temperature,Fan,2
,,0,2024-03-01T10:00:00Z,22.8,Temperature,Fan,3
,,0,2024-03-01T10:00:00Z,23.6,Temperature,Fan,4
,,0,2024-03-01T10:00:00Z,21.7,Temperature,Fan,5
,,0,2024-04-01T10:00:00Z,26.1,Temperature,Fan,1
,,0,2024-04-01T10:00:00Z,27.8,Temperature,Fan,2
,,0,2024-04-01T10:00:00Z,24.9,Temperature,Fan,3
,,0,2024-04-01T10:00:00Z,22.4,Temperature,Fan,4
,,0,2024-04-01T10:00:00Z,20.8,Temperature,Fan,5
,,0,2024-05-01T10:00:00Z,19.5,Temperature,Fan,1
,,0,2024-05-01T10:00:00Z,20.1,Temperature,Fan,2
,,0,2024-05-01T10:00:00Z,18.4,Temperature,Fan,3
,,0,2024-05-01T10:00:00Z,22.3,Temperature,Fan,4
,,0,2024-05-01T10:00:00Z,27.0,Temperature,Fan,5
,,0,2024-06-01T10:00:00Z,25.2,Temperature,Fan,1
,,0,2024-06-01T10:00:00Z,21.0,Temperature,Fan,2
,,0,2024-06-01T10:00:00Z,26.5,Temperature,Fan,3
,,0,2024-06-01T10:00:00Z,24.3,Temperature,Fan,4
,,0,2024-06-01T10:00:00Z,23.0,Temperature,Fan,5
,,0,2024-07-01T10:00:00Z,21.7,Temperature,Fan,1
,,0,2024-07-01T10:00:00Z,23.5,Temperature,Fan,2
,,0,2024-07-01T10:00:00Z,24.9,Temperature,Fan,3
,,0,2024-07-01T10:00:00Z,26.2,Temperature,Fan,4
,,0,2024-07-01T10:00:00Z,20.7,Temperature,Fan,5
,,0,2024-08-01T10:00:00Z,27.2,Temperature,Fan,1
,,0,2024-08-01T10:00:00Z,22.1,Temperature,Fan,2
,,0,2024-08-01T10:00:00Z,24.3,Temperature,Fan,3
,,0,2024-08-01T10:00:00Z,25.5,Temperature,Fan,4
,,0,2024-08-01T10:00:00Z,22.9,Temperature,Fan,5
,,0,2024-09-01T10:00:00Z,18.9,Temperature,Fan,1
,,0,2024-09-01T10:00:00Z,20.3,Temperature,Fan,2
,,0,2024-09-01T10:00:00Z,21.6,Temperature,Fan,3
,,0,2024-09-01T10:00:00Z,23.2,Temperature,Fan,4
,,0,2024-09-01T10:00:00Z,24.8,Temperature,Fan,5
,,0,2024-10-01T10:00:00Z,22.4,Temperature,Fan,1
,,0,2024-10-01T10:00:00Z,26.3,Temperature,Fan,2
,,0,2024-10-01T10:00:00Z,23.7,Temperature,Fan,3
,,0,2024-10-01T10:00:00Z,19.1,Temperature,Fan,4
,,0,2024-10-01T10:00:00Z,18.7,Temperature,Fan,5
,,0,2024-11-01T10:00:00Z,21.9,Temperature,Fan,1
,,0,2024-11-01T10:00:00Z,25.5,Temperature,Fan,2
,,0,2024-11-01T10:00:00Z,22.8,Temperature,Fan,3
,,0,2024-11-01T10:00:00Z,23.4,Temperature,Fan,4
,,0,2024-11-01T10:00:00Z,25.9,Temperature,Fan,5
,,0,2024-12-01T10:00:00Z,19.5,Temperature,Fan,1
,,0,2024-12-01T10:00:00Z,20.8,Temperature,Fan,2
,,0,2024-12-01T10:00:00Z,23.0,Temperature,Fan,3
,,0,2024-12-01T10:00:00Z,24.2,Temperature,Fan,4
,,0,2024-12-01T10:00:00Z,21.6,Temperature,Fan,5


import express, { Request, Response } from 'express';
import { InfluxDB, QueryApi } from '@influxdata/influxdb-client';
import dotenv from 'dotenv';
import path from 'path';
import sequelize from './models/index';
import appLogin from './app';
import fs from 'fs';
import multer from 'multer';


dotenv.config();

const upload = multer({ dest: 'uploads/' });

const app = express();
const port = 3000;

const influxDBUrl = 'http://localhost:8086';
const token = 'aflLC2CIRvmQWgF4gGEga-7O3fGEPtEDuTwcYtQtqc_rd1wK-FM9uxH6o_mrRx-lTfs7JuMhzQJxDY1G74rB5A==';
const org = '379932e683da78f5';


// Buckets for Suhu, Kelembapan, and KonsumsiListrik
const suhuBucket = 'dataIotSuhu';
const kelembapanBucket = 'dataIOTKelembapan';
const listrikBucket = 'dataIOTListrik';

const influxDB = new InfluxDB({ url: influxDBUrl, token });

app.use(express.json());
appLogin.use(express.static(path.join(__dirname, 'public')));
app.use(express.static(path.join(__dirname, 'public')));

// Helper Function: Query data dari InfluxDB
const queryData = async (bucket: string): Promise<Record<string, unknown>[]> => {
  const queryApi: QueryApi = influxDB.getQueryApi(org);
  const query = `from(bucket: "${bucket}") |> range(start: 0)`; // Sesuaikan range waktu
  const results: Record<string, unknown>[] = [];

  return new Promise((resolve, reject) => {
    queryApi.queryRows(query, {
      next(row, tableMeta) {
        results.push(tableMeta.toObject(row));
      },
      error(error) {
        console.error(`Error querying ${bucket}:`, error);
        reject(error);
      },
      complete() {
        resolve(results);
      },
    });
  });
};

// Endpoint untuk data suhu
app.get('/data/suhu', async (req: Request, res: Response) => {
  try {
    const data = await queryData(suhuBucket);
    res.json(data);
  } catch (error) {
    res.status(500).send('Error fetching data for suhu.');
  }
});

// Endpoint untuk data kelembapan
app.get('/data/kelembapan', async (req: Request, res: Response) => {
  try {
    const data = await queryData(kelembapanBucket);
    res.json(data);
  } catch (error) {
    res.status(500).send('Error fetching data for kelembapan.');
  }
});

// Endpoint untuk data konsumsi listrik
app.get('/data/konsumsiListrik', async (req: Request, res: Response) => {
  try {
    const data = await queryData(listrikBucket);
    res.json(data);
  } catch (error) {
    res.status(500).send('Error fetching data for konsumsi listrik.');
  }
});

// Endpoint untuk halaman utama login
appLogin.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});


const jsonToLineProtocol = (jsonData: Record<string, any>[], measurement: string): string => {
  return jsonData
    .map(
      (item) =>
        `${measurement},type=${item.type || 'default'} value=${item.value || 0} ${item.timestamp || Date.now()}`
    )
    .join('\n');
};


// Endpoint to upload JSON file and convert to line protocol
app.post('/upload-json', upload.single('file'), async (req: Request, res: Response) => {
  const file = req.file;

  if (!file) {
    return res.status(400).send('No file uploaded.');
  }

  try {
    const data = fs.readFileSync(file.path, 'utf-8');
    const jsonData = JSON.parse(data);

    const lineProtocol = jsonToLineProtocol(jsonData, 'iot_data');

    const writeApi: WriteApi = influxDB.getWriteApi(org, suhuBucket);
    writeApi.writeRecords(lineProtocol.split('\n'));

    await writeApi.close();

    fs.unlinkSync(file.path);

    res.status(200).send('File uploaded and data written to InfluxDB.');
  } catch (error) {
    console.error('Error processing file:', error);
    res.status(500).send('Error processing file.');
  }
});

const startServerIot = async () => {
  try {
    await sequelize.authenticate();
    console.log('Database connected!');
    await sequelize.sync();
    const loginPort = 3000;
    appLogin.listen(loginPort, () => {
      console.log(`Server running at http://localhost:${port}`);
    });

    const iotPort = 4000; // Port untuk appIot
    app.listen(iotPort, () => {
      console.log(`AppIot running at http://localhost:${iotPort}`);
    });

  } catch (error) {
    console.error('Unable to connect to the database:', error);
  }
};
startServerIot();